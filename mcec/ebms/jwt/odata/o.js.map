{"version":3,"file":"o.js","sources":["../../src/ORequest.ts","../../src/OBatch.ts","../../src/OHandler.ts","../../src/o.ts"],"sourcesContent":["import { OdataQuery } from \"./OdataQuery\";\n\nconst encodeURIComponentStrict = (str: string) =>\n  encodeURIComponent(str).replace(\n    /[!'()*]/g,\n    (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`\n  );\n\nexport class ORequest {\n  public url: URL;\n\n  constructor(url: URL | string, public config: RequestInit) {\n    if (typeof url === \"string\") {\n      this.url = new URL(url);\n    } else {\n      this.url = url as URL;\n    }\n  }\n\n  public get fetch() {\n    const req = new Request(this.url.href, this.config);\n    return fetch(req, this.config);\n  }\n\n  public applyStringQuery(query: string, configQuery: URLSearchParams | OdataQuery = {}) {\n    const searchParams = new URLSearchParams(query);\n    searchParams.forEach((value, key) => {\n      if (!query.hasOwnProperty(key)) {\n        configQuery[key] = value;\n      }\n    });\n    return this.applyQuery(configQuery);\n  }\n\n  public applyQuery(query: OdataQuery = {}) {\n    this.url.searchParams.forEach((value, key) => {\n      if (!query.hasOwnProperty(key)) {\n        query[key] = value;\n      }\n    });\n\n    this.url.search = Object.entries(query)\n      .map(\n        ([key, value]) =>\n          `${encodeURIComponentStrict(key)}=${encodeURIComponentStrict(value)}`\n      )\n      .join(\"&\");\n    return this;\n  }\n}\n","import { OdataConfig } from \"./OdataConfig\";\nimport { OdataQuery } from \"./OdataQuery\";\nimport { ORequest } from \"./ORequest\";\n\nconst CRLF = \"\\r\\n\";\n\nexport class OBatch {\n  // \"\" here prevents 'undefined' at start of body under some conditions.\n  private batchBody = \"\";\n  private batchUid;\n  private batchConfig: OdataConfig;\n\n  constructor(\n    resources: ORequest[],\n    config: OdataConfig,\n    query?: OdataQuery,\n    private changeset: boolean = false,\n  ) {\n    this.batchConfig = { ...config, ...config.batch };\n    this.batchUid = this.getUid();\n    (this.batchConfig.headers as Headers).set(\n       \"Content-Type\",\n       `multipart/mixed; boundary=${this.batchUid}`,\n    );\n\n    if (this.batchConfig.batch.useChangset) {\n      resources = this.checkForChangset(resources, query);\n    } else {\n      this.batchBody += `--${this.batchUid}`;\n    }\n\n    resources.forEach(\n      (req) => req.config.method === \"GET\" && req.applyQuery(query),\n    );\n    let contentId = 0;\n    this.batchBody += resources.map((req) => {\n      contentId++;\n      return [\n        \"\",\n        \"Content-Type: application/http\",\n        \"Content-Transfer-Encoding: binary\",\n        `Content-ID: ${contentId}`,\n        \"\",\n        `${req.config.method} ${this.getRequestURL(req)} HTTP/1.1`,\n        `${this.getHeaders(req)}`,\n        `${this.getBody(req)}`\n      ].join(CRLF);\n    }).join(`${CRLF}--${this.batchUid}`);\n\n    this.batchBody += `${CRLF}--${this.batchUid}--${CRLF}`;\n    if(!changeset){\n      (this.batchConfig.headers as Headers).set(\n        \"Content-Type\",\n        `multipart/mixed;boundary=${this.batchUid}`,\n      );\n    }\n  }\n\n  public async fetch(url: URL) {\n    const req = new ORequest(url, {\n      ...this.batchConfig,\n      body: this.batchBody,\n      method: \"POST\",\n    });\n    const res: Response = await req.fetch;\n    if (res.status === 200) {\n      const data = await res.text();\n      return this.parseResponse(data, res.headers.get(\"Content-Type\"));\n    } else {\n      throw res;\n    }\n  }\n\n  public parseResponse(responseData: string, contentTypeHeader: string): any {\n    const headers = contentTypeHeader.split(\"boundary=\");\n    const boundary = headers[headers.length - 1];\n    const splitData = responseData.split(`--${boundary}`);\n    splitData.shift();\n    splitData.pop();\n    let wasWithChangesetresponse = false;\n    const parsedData = splitData.map((data) => {\n      const dataSegments = data.trim().split(\"\\r\\n\\r\\n\");\n      if (dataSegments.length === 0) {\n        // we are unable to parse -> return all\n        return data;\n      } else if (dataSegments.length > 3) {\n        const header = dataSegments.find(\n            (x) => x.startsWith(\"Content-Type: \") && x.includes(\"boundary=changesetresponse_\"));\n        if (!header) {\n          return data;\n        }\n        dataSegments.shift();\n        wasWithChangesetresponse = true;\n        return this.parseResponse(dataSegments.join(\"\\r\\n\\r\\n\"), header);\n      } else {\n        var contentIdHeader = dataSegments[0].split(\"\\r\\n\").find(function (x) { return x.startsWith(\"Content-ID: \"); });\n        if (contentIdHeader) {\n          try {\n            var contentId = parseInt(contentIdHeader.substring(12), 10);\n          } catch (ex) {\n          }\n        }\n        var status = +dataSegments[1].split(\" \")[1];\n        if (dataSegments.length === 3) {\n          // if length == 3 we have a body, try to parse if JSON and return that!\n          var body;\n          try {\n            const parsed = JSON.parse(dataSegments[2]);\n            const hasFragment = parsed[this.batchConfig.fragment];\n            body = hasFragment || parsed;\n          } catch (ex) {\n            body = dataSegments[2];\n          }\n        }\n        return { contentId, status, body };\n      }\n    });\n    if (wasWithChangesetresponse) {\n        return parsedData[0];\n    }\n    return parsedData;\n  }\n\n  /**\n   * If we determine a changset (POST, PUT, PATCH) we initalize a new\n   * OBatch instance for it.\n   */\n  private checkForChangset(resources: ORequest[], query: OdataQuery) {\n    const changeRes = this.getChangeResources(resources);\n\n    if (this.changeset) {\n      this.batchBody += [\n        \"\",\n        `Content-Type: multipart/mixed;boundary=${this.batchUid}`,\n        \"\",\n        `--${this.batchUid}`\n      ].join(CRLF);\n    } else if (changeRes.length > 0) {\n      this.batchBody = `--${this.batchUid}`;\n      this.batchBody += new OBatch(\n        changeRes,\n        this.batchConfig,\n        query,\n        true,\n      ).batchBody;\n      resources = this.getGETResources(resources);\n    } else {\n      this.batchBody = `--${this.batchUid}`;\n    }\n    return resources;\n  }\n\n  private getGETResources(resources: ORequest[]): ORequest[] {\n    return resources.filter((req) => req.config.method === \"GET\");\n  }\n\n  private getChangeResources(resources: ORequest[]): ORequest[] {\n    return resources.filter((req) => req.config.method !== \"GET\");\n  }\n\n  private getBody(req: ORequest) {\n    if (req.config.body) {\n      return `${req.config.body}${CRLF}${CRLF}`;\n    }\n    return \"\";\n  }\n\n  private getUid() {\n    let d = new Date().getTime();\n    const uuid = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = (d + Math.random() * 16) % 16 | 0;\n      d = Math.floor(d / 16);\n      return (c === \"x\" ? r : (r & 0x7) | 0x8).toString(16);\n    });\n    return `${\n      this.changeset\n        ? this.batchConfig.batch.changsetBoundaryPrefix\n        : this.batchConfig.batch.boundaryPrefix\n    }${uuid}`;\n  }\n\n  private getHeaders(req: ORequest): string {\n  // Request headers can be Headers | string[][] | Record<string, string>.\n  // A new Headers instance around them allows treatment of all three types\n  // to be the same. This also applies security last two could bypass.\n  const headers = new Headers(req.config.headers || undefined) as any;\n  // Convert each header to single string.\n  // Headers is iterable. Array.from is needed instead of Object.keys.\n  const mapped = Array.from(headers).map(([k, v]) => `${k}: ${v}`);\n  if (mapped.length) {\n    // Need to ensure a blank line between HEADERS and BODY. When there are\n    // headers, it must be added here. Otherwise blank is added in ctor.\n    mapped.push(\"\");\n  }\n  return mapped.join(CRLF);\n  }\n\n  private getRequestURL(req: ORequest): string {\n  let href = req.url.href;\n  if (this.batchConfig.batch.useRelativeURLs) {\n    // Strip away matching root from request.\n    href = href.replace((this.batchConfig.rootUrl as URL).href, \"\");\n  }\n  return href;\n  }\n}\n","import { OBatch } from \"./OBatch\";\nimport { OdataConfig } from \"./OdataConfig\";\nimport { OdataQuery } from \"./OdataQuery\";\nimport { ORequest } from \"./ORequest\";\n\ntype BodyType =\n  | Blob\n  | BufferSource\n  | FormData\n  | URLSearchParams\n  | string\n  | object\n  | Object;\n\nexport class OHandler {\n  private requests: ORequest[] = [];\n\n  constructor(public config: OdataConfig) {}\n\n  /**\n   * Does a fetch request to the given endpoint and request\n   * all resources in sequent. Tries to parse the result logical\n   * so that no further processing is used. If the result is only one\n   * entity a object is returned, otherwise a array of objects.\n   *\n   * @example\n   * ```typescript\n   *  const russell = await o('https://services.odata.org/TripPinRESTierService/')\n   *  .get('People(\"russellwhyte\"))\n   *  .query();\n   *\n   *  console.log(russell); // shows: { FirstName: \"Russell\", LastName: \"Whyte\" [...] }\n   * ```\n   *\n   * If the request fails with an error code higher then 400 it throws the\n   * Response:\n   *\n   * @example\n   * ```typescript\n   *  try {\n   *    const unknown = await o('https://services.odata.org/TripPinRESTierService/')\n   *      .get('People(\"unknown\"))\n   *      .query();\n   *  } catch(res) { // Response\n   *    console.log(res.status); // 404\n   *  }\n   * ```\n   *\n   * @param query The URLSearchParams that are added to the question mark on the url.\n   *              That are usually the odata queries like $filter, $top, etc... or a string of parameters.\n   * @returns Either an array or a object with the given entities. If multiple\n   *          resources are fetched, this method returns a array of array/object. If there\n   *          is no content (e.g. for delete) this method returns the Response\n   */\n  public async query(query?: OdataQuery | string) {\n    try {\n      this.config.onStart(this);\n      const response: Response[] = await this.getFetch(query);\n      const json = await Promise.all(\n        response.map(async (res) => {\n          if (res.status >= 400) {\n            throw res;\n          } else if (res.ok && res.json) {\n            try {\n              this.config.onFinish(this, res);\n              const data = await res.json();\n              return data[this.config.fragment] || data;\n            } catch (ex) {\n              return res;\n            }\n          } else {\n            return await res.text();\n          }\n        })\n      );\n      return json.length > 1 ? json : json[0];\n    } catch (ex) {\n      this.config.onError(this, ex);\n      throw ex;\n    } finally {\n      this.requests = [];\n    }\n  }\n\n  /**\n   * Request all requests in sequent. Does simply return a Response or Response[]\n   * without any data parsing applied.\n   *\n   * @param query The URLSearchParams that are added to the question mark on the url.\n   *              That are usually the odata queries like $filter, $top, etc...\n   */\n  public async fetch(query?: OdataQuery | string) {\n    try {\n      this.config.onStart(this);\n      const fetch = await this.getFetch(query);\n      return fetch.length === 1 ? fetch[0] : fetch;\n    } catch (ex) {\n      this.config.onError(this, ex);\n      throw ex;\n    } finally {\n      this.config.onFinish(this);\n      this.requests = [];\n    }\n  }\n\n  /**\n   * Does a batch http-batch request. All request in that sequent are send via one\n   * physically request and afterwards parsed to separate data chunks.\n   *\n   * @param query The URLSearchParams that are added to the question mark on the url.\n   *              That are usually the odata queries like $filter, $top, etc...\n   */\n  public async batch(query?: OdataQuery) {\n    try {\n      const batch = new OBatch(this.requests, this.config, query);\n      const url = this.getUrl(this.config.batch.endpoint);\n      const data = await batch.fetch(url);\n      return data;\n    } catch (ex) {\n      this.config.onError(this, ex);\n      throw ex;\n    } finally {\n      this.requests = [];\n    }\n  }\n\n  /**\n   * Gets the data from the endpoint + resource url.\n   *\n   * @param resource The resource to request e.g. People/$value.\n   */\n  public get(resource: string = \"\") {\n    const url = this.getUrl(resource);\n    const request = new ORequest(url, { ...this.config, method: \"GET\" });\n    this.requests.push(request);\n    return this;\n  }\n\n  /**\n   * Post data to an endpoint + resource.\n   *\n   * @param resource The resource to post to.\n   * @param body The data to post.\n   */\n  public post(resource: string = \"\", body: BodyType) {\n    const url = this.getUrl(resource);\n    const request = new ORequest(url, {\n      ...this.config,\n      method: \"POST\",\n      body: this.getBody(body),\n    });\n    this.requests.push(request);\n    return this;\n  }\n\n  /**\n   * Put data to an endpoint + resource.\n   *\n   * @param resource The resource to put to.\n   * @param body The data to put.\n   */\n  public put(resource: string = \"\", body: BodyType) {\n    const url = this.getUrl(resource);\n    const request = new ORequest(url, {\n      ...this.config,\n      method: \"PUT\",\n      body: this.getBody(body),\n    });\n    this.requests.push(request);\n    return this;\n  }\n\n  /**\n   * Patch data to an endpoint + resource.\n   *\n   * @param resource The resource to patch to.\n   * @param body The data to patch.\n   */\n  public patch(resource: string = \"\", body: BodyType) {\n    const url = this.getUrl(resource);\n    const request = new ORequest(url, {\n      ...this.config,\n      body: this.getBody(body),\n      method: \"PATCH\",\n    });\n    this.requests.push(request);\n    return this;\n  }\n\n  /**\n   * Deletes a resource from the endpoint.\n   *\n   * @param resource The resource to delete e.g. People/1\n   */\n  public delete(resource = \"\") {\n    const url = this.getUrl(resource);\n    const request = new ORequest(url, { ...this.config, method: \"DELETE\" });\n    this.requests.push(request);\n    return this;\n  }\n\n  /**\n   * Use that method to add any kind of request (e.g. a head request) to\n   * the execution list.\n   *\n   * @example\n   * ```typescript\n   *   const req = new ORequest('http://full.url/healt', { method: 'HEAD'});\n   *   const res = await o('http://another.url').request(req).fetch();\n   *   console.log(res.status); // e.g. 200 from http://full.url/healt\n   * ```\n   * @param req The request to add.\n   */\n  public request(req: ORequest) {\n    this.requests.push(req);\n    return this;\n  }\n\n  /**\n   * Determines how many request are outstanding.\n   */\n  public get pending() {\n    return this.requests.length;\n  }\n\n  /**\n   * Returns a URL based on the rootURL + the given resource\n   * @param resource The resource to join.\n   */\n  public getUrl(resource: string) {\n    return new URL(resource, this.config.rootUrl);\n  }\n\n  private async getFetch(query: OdataQuery | string) {\n    if (this.pending > 1) {\n      const result: Response[] = [];\n      for (const req of this.requests) {\n        if (typeof query === \"string\") {\n          req.applyStringQuery(query, this.config.query);\n        } else {\n          req.applyQuery({ ...this.config.query, ...query });\n        }\n        const request = await req.fetch;\n        result.push(request);\n      }\n      return result;\n    } else {\n      if (typeof query === \"string\") {\n        this.requests[0].applyStringQuery(query, this.config.query);\n      } else {\n        this.requests[0].applyQuery({ ...this.config.query, ...query });\n      }\n      return [await this.requests[0].fetch];\n    }\n  }\n\n  private getBody(body: BodyType): any {\n    if (body instanceof Object) {\n      return JSON.stringify(body);\n    }\n    return body;\n  }\n}\n","import { OdataConfig } from \"./OdataConfig\";\nimport { OHandler } from \"./OHandler\";\n\n/**\n * Use the 'o'-function to initialize a request directly or use the returned\n * handler to store the settings.\n *\n * Use o() directly jquery like:\n * @example\n * ```typescript\n *  await o('https://rootUrl').get('resource').query();\n * ```\n *\n * Or with a handler:\n * @example\n * ```typescript\n *  const oHandler = o('https://rootUrl');\n *  await oHandler.get('resource').query({ $top: 2 });\n * ```\n *\n * @param rootUrl The url to query\n * @param config The odata and fetch configuration.\n */\nexport function o(rootUrl: string | URL, config: Partial<OdataConfig> = {}) {\n  // set the default configuration values\n  const defaultConfigValues: OdataConfig = {\n    batch: {\n      boundaryPrefix: \"batch_\",\n      changsetBoundaryPrefix: \"changset_\",\n      endpoint: \"$batch\",\n      headers: new Headers({\n        \"Content-Type\": \"multipart/mixed\",\n      }),\n      useChangset: false,\n      useRelativeURLs: false,\n    },\n    credentials: \"omit\",\n    fragment: \"value\",\n    headers: new Headers({\n      \"Content-Type\": \"application/json\",\n    }),\n    mode: \"cors\",\n    redirect: \"follow\",\n    referrer: typeof window === \"undefined\" ? undefined : \"client\",\n    onStart: () => null,\n    onError: () => null,\n    onFinish: () => null,\n  };\n\n  const mergedConfig: OdataConfig = { ...defaultConfigValues, ...config };\n  if (typeof rootUrl === \"string\") {\n    try {\n      // we assuming a resource\n      const configUrl = (mergedConfig.rootUrl ||\n        window.location.href) as string;\n      rootUrl = new URL(\n        rootUrl,\n        configUrl.endsWith(\"/\") ? configUrl : `${configUrl}/`\n      );\n    } catch (ex) {\n      // no window?!\n      rootUrl = new URL(rootUrl as string, mergedConfig.rootUrl);\n    }\n  }\n  mergedConfig.rootUrl = rootUrl;\n  return new OHandler(mergedConfig);\n}\n\n/**\n * Default exports\n */\nexport * from \"./OBatch\";\nexport * from \"./OdataConfig\";\nexport * from \"./OdataQuery\";\nexport * from \"./OHandler\";\nexport * from \"./ORequest\";\n"],"names":[],"mappings":"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"}